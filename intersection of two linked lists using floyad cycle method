class node{
  public:
  int data;
  node*next;
}
node* startingnodeofcycle(node* head){
  if(head==NULL || head->next==NULL){
    return NULL;
  }
  node* slow=head;
  node* fast=head;
  while(fast!=NULL && fast->next!=NULL){
    fast=fast->next->next;
    slow=slow->next;
    
    if(slow==fast){
      break;
    }
  }
  if(slow!=fast){
    return NULL;
  }
  slow=head;
  fast=fast;
  while(slow!=fast){
    slow=slow->next;
    fast=fast->next;
  }
  return slow;
}
node* intersectionoftwoll(node* head1,node* head2){
    if(head1==NULL|| head2==NULL){
      return NULL;
    }
    node* tail=head1;
    while(tail->next!=NULL){
      tail=tail->next;
    }
    tail->next=head2;
    node* ans=startingnodeofcycle(head1);
    
    tail->next=NULL;
    return ans;
}
